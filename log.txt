DEBUG:ahk.script:Rendering template: joystick/joyXY_keyboard.ahk
DEBUG:ahk.script:Running script text: 
#NoEnv
#Persistent

global KeysToHoldDown := []
global Joy10flag := False
SetTimer, WatchAxis, 5
return

GetDirection(X, Y)
{
    if (X<30)
    {
        if (Y<30){
            direction := ["w","a"]
        }else if (Y > 70){
            direction := ["s","a"]
        }else{
            direction := ["a"]
        }
    }else if (X>70)
    {
        if (Y<30){
            direction := ["w","d"]
        }else if (Y > 70){
            direction := ["s","d"]
        }else{
            direction := ["d"]
        }
    }else{
        if (Y<30){
            direction := ["w"]
        }else if (Y > 70){
            direction := ["s"]
        }else{
            direction := []
        }
    }
    return %direction%
}

WatchAxis(){
    JoyX := GetKeyState("JoyX")  
    JoyY := GetKeyState("JoyY") 
    KeysDown := KeysToHoldDown

    KeysToHoldDown := GetDirection(JoyX, JoyY)

            if (GetKeyState("Joy9")){
        Send, { LControl Down}
    }else{
        Send, { LControl Up}
    }
                if (GetKeyState("Joy10")){
        if (Joy10flag){
            Send, { LShift Up}
            Joy10flag := False
        }else{
            Send, { LShift Down}
            Joy10flag := True
        }
    }
        
    SetKeyDelay -1  ; Avoid delays between keystrokes.
    
    if (KeysToHoldDown = KeysDown){
        return
    }else{
        for index, key in KeysDown
            Send {%key% Up}
        for index, key in KeysToHoldDown
            Send {%key% Down}
    }
        return
}

ExitApp

DEBUG:ahk.script:Blocking set to: False
DEBUG:ahk.script:Rendering template: joystick/joy_2_mouse.ahk
DEBUG:ahk.script:Running script text: 
#NoEnv
#Persistent

SetTimer, WatchJoystick, 5
return

GetDelta(axis){
    if (axis < 45){
        delta := axis - 45
    }else if (axis > 55){
        delta := axis - 55
    }else{
        delta := 0
    }
    return delta
}

WatchJoystick:
    X := GetKeyState("JoyU")
    Y := GetKeyState("JoyR")

    deltaX := Getdelta(X)
    deltaY := Getdelta(Y)

    if abs(deltaX) > 0 or abs(deltaY) > 0
                DllCall("mouse_event" ,uint, 1, int, deltaX*0.3, int, deltaY*0.3)
            return


ExitApp

DEBUG:ahk.script:Blocking set to: False
DEBUG:ahk.script:Rendering template: joystick/holdscript_bind.ahk
DEBUG:ahk.script:Running script text: 
#NoEnv
#Persistent

Joy2::
Send {q down}
Sleep, 200
SetTimer, WaitForJoy2Up, 10
return

WaitForJoy2Up(){
    if (GetKeyState("Joy2")){
        Send {q down}
    }else{
        Send {q up}
        SetTimer, WaitForJoy2Up, Off
    }
    return
}
Joy1::
Send {Space down}
Sleep, 200
SetTimer, WaitForJoy1Up, 10
return

WaitForJoy1Up(){
    if (GetKeyState("Joy1")){
        Send {Space down}
    }else{
        Send {Space up}
        SetTimer, WaitForJoy1Up, Off
    }
    return
}

ExitApp

DEBUG:ahk.script:Blocking set to: False
DEBUG:ahk.script:Rendering template: joystick/simple_bind.ahk
DEBUG:ahk.script:Running script text: 
#NoEnv
#Persistent

    Joy3::e
    Joy4::f
    Joy7::F3
    Joy8::Escape
    Joy5::WheelUp
    Joy6::WheelDown

ExitApp

DEBUG:ahk.script:Blocking set to: False
DEBUG:ahk.script:Rendering template: joystick/trigger_2_mouseclick.ahk
DEBUG:ahk.script:Running script text: 
#NoEnv
#Persistent
#Include, C:\Users\tompr\OneDrive\coding\Mine-AHK-Box\ahk\templates\joystick\XInput.ahk
XInput_Init()

SetTimer, WatchTriggers, 5
return

GetKeysState(triggers){
    KeysState := {}
    for key, value in triggers
        if value > 190
            KeysState[key] := "Down"
        else if value < 190
            KeysState[key] := "Up"
    return KeysState
}

WatchTriggers:
    PrevKeysState := KeysState
    State := XInput_GetState(1-1)

    LT := State.bLeftTrigger
    RT := State.bRightTrigger

    triggers := { right:LT, left:RT}

    KeysState := GetKeysState(triggers)

    for key, state in KeysState
        if (PrevKeysState[key] = state){
        }else if (state = "Down"){        
            MouseClick, %key%, , , 1, 0, D
        }else if (state = "Up"){
            MouseClick, %key%, , , 1, 0, U
        }

    return

ExitApp
DEBUG:ahk.script:Blocking set to: False
DEBUG:ahk.script:Rendering template: joystick/joy_gridmouse.ahk
DEBUG:ahk.script:Running script text: 
#NoEnv
#Persistent

; initialise
global Direction := [0,0]
global move := Func("GridMoveMouse").bind(Direction)

SetTimer, WatchPOV, 5
return

GetDir(POV){
    if POV < 0
        return [0,0]
    else if POV > 31401
        return [0, -35]
    else if POV between -1 and 4400
        return [0, -35]
    else if POV between 4401 and 13400
        return [35, 0]
    else if POV between 13401 and 22400
        return [0, 35]
    else if POV between 22401 and 31400
        return [-35, 0]

}

WatchPOV(){
    PrevDirection := Direction
    POV := GetKeyState("JoyPOV")

    Direction := GetDir(POV)

    if (PrevDirection[1] = Direction[1] and PrevDirection[2] = Direction[2]){
        return
    }else if (Direction[1] = 0 and Direction[2] = 0){
 	    SetTimer, %move%, Off
    }else{
        MouseMove, Direction[1], Direction[0], 0, R
        SetTimer, %move%, Off
        move := Func("GridMoveMouse").bind(Direction)
                SetTimer, %move%, 100
    }
    return
}

GridMoveMouse(XY){
    MouseMove, XY[1], XY[2], 0, R
    return
}

ExitApp

DEBUG:ahk.script:Blocking set to: False
